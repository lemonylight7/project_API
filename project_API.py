# -*- coding: utf8 -*-
import math
import pygame
import requests
import sys
import os
# список городов которые будут в игре

# режим: столицы
capitals = ['Амстердам', 'Андорра-ла-Велья', 'Афины', 'Белград', 'Берлин', 'Берн', 'Братислава', 'Брюссель', 'Будапешт', 'Бухарест', 'Вадуц', 'Валлетта', 'Варшава', 'Ватикан', 'Вена', 'Вильнюс', 'Дублин', 'Загреб', 'Киев', 'Кишинёв', 'Копенгаген', 'Лиссабон', 'Лондон', 'Любляна', 'Люксембург', 'Мадрид', 'Минск', 'Монако', 'Москва', 'Осло', 'Париж', 'Подгорица', 'Прага', 'Рейкьявик', 'Рига', 'Рим', 'Сан-Марино', 'Сараево', 'Скопье', 'София', 'Стокгольм', 'Таллин', 'Тирана', 'Хельсинки', 'Абу-Даби', 'Амман', 'Анкара', 'Ашхабад', 'Багдад', 'Баку', 'Бангкок', 'Бандар-Сери-Бегаван', 'Бейрут', 'Бишкек', 'Вьентьян', 'Дакка', 'Дамаск', 'Дели (Нью-Дели)', 'Джакарта', 'Дили', 'Доха', 'Душанбе', 'Ереван', 'Иерусалим', 'Исламабад', 'Кабул', 'Катманду', 'Куала-Лумпур', 'Мале', 'Манама', 'Манила', 'Маскат', 'Нейпьидо', 'Никосия', 'Нур-Султан', 'Пекин', 'Пномпень', 'Пхеньян', 'Сана', 'Сеул', 'Сингапур', 'Ташкент', 'Тбилиси', 'Тегеран', 'Токио', 'Тхимпху', 'Улан-Батор', 'Ханой', 'Шри-Джаяварденепура-Котте', 'Эль-Кувейт', 'Эр-Рияд', 'Абуджа', 'Аддис-Абеба', 'Аккра', 'Алжир', 'Антананариву', 'Асмэра', 'Бамако', 'Банги', 'Банжул', 'Бисау', 'Браззавиль', 'Виктория', 'Виндхук', 'Габороне', 'Гитега', 'Дакар', 'Джибути', 'Джуба', 'Додома', 'Каир', 'Кампала', 'Кигали', 'Киншаса', 'Конакри', 'Либревиль', 'Лилонгве', 'Ломе', 'Луанда', 'Лусака', 'Малабо', 'Мапуту', 'Масеру', 'Мбабане', 'Могадишо', 'Монровия', 'Морони', 'Найроби', 'Нджамена', 'Ниамей', 'Нуакшот', 'Порт-Луи', 'Порто-Ново', 'Прая', 'Претория', 'Рабат', 'Сан-Томе', 'Триполи', 'Тунис', 'Уагадугу', 'Фритаун', 'Хараре', 'Хартум', 'Ямусукро', 'Яунде', 'Асунсьон', 'Бастер', 'Бельмопан', 'Богота', 'Бразилиа', 'Бриджтаун', 'Буэнос-Айрес', 'Вашингтон', 'Гавана', 'Гватемала', 'Джорджтаун', 'Каракас', 'Кастри', 'Кингстаун', 'Кингстон', 'Кито', 'Лима', 'Манагуа', 'Мехико', 'Монтевидео', 'Нассау', 'Оттава', 'Панама', 'Парамарибо', 'Порт-о-Пренс', 'Порт-оф-Спейн', 'Розо', 'Сан-Сальвадор', 'Сан-Хосе', 'Санто-Доминго', 'Сантьяго', 'Сент-Джонс', 'Сент-Джорджес', 'Сукре', 'Тегусигальпа', 'Апиа', 'Веллингтон', 'Канберра', 'Маджуро', 'Нгерулмуд', 'Нукуалофа', 'Паликир', 'Порт-Вила', 'Порт-Морсби', 'Сува', 'Фунафути', 'Хониара', 'Южная Тарава (Баирики)']

# режим: города России
russian_cities = ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург', 'Нижний Новгород', 'Казань', 'Челябинск', 'Омск', 'Самара', 'Ростов-на-Дону', 'Уфа', 'Красноярск', 'Воронеж', 'Пермь', 'Волгоград', 'Краснодар', 'Саратов', 'Тюмень', 'Тольятти', 'Ижевск', 'Барнаул', 'Ульяновск', 'Иркутск', 'Хабаровск', 'Ярославль', 'Владивосток', 'Махачкала', 'Томск', 'Оренбург', 'Кемерово', 'Новокузнецк', 'Рязань', 'Астрахань', 'Набережные Челны', 'Пенза', 'Липецк', 'Киров', 'Чебоксары', 'Тула', 'Калининград', 'Балашиха', 'Курск', 'Севастополь', 'Сочи', 'Улан-Удэ', 'Ставрополь', 'Тверь', 'Магнитогорск', 'Брянск', 'Иваново', 'Белгород', 'Сургут', 'Владимир', 'Нижний Тагил', 'Архангельск', 'Чита', 'Симферополь', 'Калуга', 'Смоленск', 'Волжский', 'Саранск', 'Череповец', 'Курган', 'Орёл', 'Вологда', 'Якутск', 'Владикавказ', 'Подольск', 'Грозный', 'Мурманск', 'Тамбов', 'Петрозаводск', 'Стерлитамак', 'Кострома', 'Нижневартовск', 'Новороссийск', 'Йошкар-Ола', 'Химки', 'Таганрог', 'Комсомольск-на-Амуре', 'Сыктывкар', 'Нижнекамск', 'Нальчик', 'Шахты', 'Дзержинск', 'Орск', 'Братск', 'Энгельс', 'Ангарск', 'Благовещенск', 'Королёв', 'Старый Оскол', 'Великий Новгород', 'Мытищи', 'Псков', 'Люберцы', 'Бийск', 'Южно-Сахалинск', 'Прокопьевск', 'Армавир', 'Балаково', 'Рыбинск', 'Абакан', 'Северодвинск', 'Петропавловск-Камчатский', 'Норильск', 'Уссурийск', 'Волгодонск', 'Сызрань', 'Новочеркасск', 'Каменск-Уральский', 'Златоуст', 'Красногорск', 'Электросталь', 'Альметьевск', 'Салават', 'Миасс', 'Керчь', 'Находка', 'Копейск', 'Пятигорск', 'Коломна', 'Рубцовск', 'Березники', 'Хасавюрт', 'Майкоп', 'Одинцово', 'Ковров', 'Кисловодск', 'Домодедово', 'Нефтекамск', 'Нефтеюганск', 'Новочебоксарск', 'Батайск', 'Щёлково', 'Серпухов', 'Новомосковск', 'Дербент', 'Черкесск', 'Первоуральск', 'Орехово-Зуево', 'Кызыл', 'Обнинск', 'Назрань', 'Невинномысск', 'Новый Уренгой', 'Каспийск', 'Раменское', 'Димитровград', 'Октябрьский', 'Долгопрудный', 'Камышин', 'Муром', 'Ессентуки', 'Новошахтинск', 'Жуковский', 'Евпатория', 'Северск', 'Реутов', 'Артём', 'Ноябрьск', 'Ачинск', 'Пушкино', 'Арзамас', 'Бердск', 'Сергиев Посад', 'Елец', 'Элиста', 'Ногинск', 'Новокуйбышевск', 'Железногорск']

# режим: достопримечательности
city_sights = ['Мачу-Пикчу', 'Мечеть шейха Зайда', 'Тадж-Махал', 'Мескита', 'Собор Святого Петра', 'Ангкор-Ват', 'Храмовый комплекс Байон', 'Собор Воскресения Христова на Крови', 'Геттисбергский национальный военный парк', 'Стены старого города', 'Пагода Шведагон', 'Мемориал Линкольна и Отражающий бассейн', 'Древний город Петра', 'Участок Великой Китайской стены Мутяньюй', 'Древний город Эфес', 'Альгамбра', 'Австралийский военный мемориал', 'Сиенский собор', 'Миланский собор (Дуомо)', 'Храм Святого Семейства', 'Мост «Золотые ворота»', 'Статуя Христа-Искупителя', 'Теотиуакан', 'Золотой Храм', 'Сиднейский оперный театр']


def lonlat_distance(a, b):
    degree_to_meters_factor = 111 * 1000
    a_lon, a_lat = a
    b_lon, b_lat = b
    radians_latitude = math.radians((a_lat + b_lat) / 2.)
    lat_lon_factor = math.cos(radians_latitude)
    dx = abs(a_lon - b_lon) * degree_to_meters_factor * lat_lon_factor
    dy = abs(a_lat - b_lat) * degree_to_meters_factor
    distance = math.sqrt(dx * dx + dy * dy)
    return distance


class MapParams(object):
    def __init__(self):
        self.lat = 55.729738
        self.lon = 37.664777
        self.zoom = 5
        self.type = "sat"
        self.geoscreen = self.screen_to_geo()
        self.point = ""
        self.postal = ''
        self.route = ''
        self.use_postal_code = False

    def update(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                self.lon, self.lat = self.position_to_geo(event.pos)
                if self.lon > 180:
                    self.lon -= 360
                if self.lon < -180:
                    self.lon += 360
                self.type = 'sat,skl'
                self.point = "&pt=" + ','.join([str(self.lon), str(self.lat), "pm2rdl"])
                # self.route = (f"&pl={','.join(self.point.replace('&pt=', '').split(',')[:-1])}," +
                #               "%--AnswerCoordinates--%")


        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                direction = [1 if event.key == pygame.K_UP else -1][0]
                move = self.lat + direction * self.geoscreen[1]
                self.lat = [move if abs(move) < 85 else self.lat][0]

            elif event.key == pygame.K_RIGHT or event.key == pygame.K_LEFT:
                direction = [1 if event.key == pygame.K_RIGHT else -1][0]
                move = self.lon + direction * self.geoscreen[0]
                self.lon = [move if abs(move) < 180 else move + -1 * direction * 360][0]


    def screen_to_geo(self, width=200, height=150):
        dx = width * 0.0000428 * math.pow(2, 15 - self.zoom)
        dy = height * 0.0000428 * math.cos(math.radians(self.lat)) * math.pow(2, 15 - self.zoom)
        return dx, dy

    def position_to_geo(self, position):
        try:
            lx, ly = self.screen_to_geo(position[0] - 300, 225 - position[1])
            lx, ly = self.lon + lx, self.lat + ly

            return lx, ly
        except Exception as e:
            print(e)
            return tuple(map(float, self.point.replace('&pt=', '').split(',')[:-1]))

    def guessCity(self):
        self.cities = ['asdfhdafsjaldsfjklaffajkls']


def load_map(mp):
    map_request = ("http://static-maps.yandex.ru/1.x/?" +
                   "ll={},{}&z={z}&l={type}{pt}{pl}".format(mp.lon, mp.lat, z=mp.zoom, type=mp.type,
                                                        pt=mp.point, pl=mp.route))

    response = requests.get(map_request)
    if not response:
        print("Ошибка выполнения запроса:")
        print(map_request)
        print("Http статус:", response.status_code, "(", response.reason, ")")
        sys.exit(1)

    map_file = "map.png"
    try:
        with open(map_file, "wb") as file:
            file.write(response.content)
    except IOError as ex:
        print("Ошибка записи временного файла:", ex)
        sys.exit(2)

    return map_file


def main():
    pygame.init()
    screen = pygame.display.set_mode((600, 450))

    mp = MapParams()
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                break
            mp.update(event)
        map_file = load_map(mp)

        screen.blit(pygame.image.load(map_file), (0, 0))
        pygame.display.flip()

    pygame.quit()
    os.remove(map_file)


if __name__ == "__main__":
    main()
